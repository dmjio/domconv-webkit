-- Split begin/Data.DOM.WBTypes

------------------------------------------------------------------
-- |
-- Module      :  Data.DOM.WBTypes
-- Copyright   :  (c) Dmitry Golubovsky, 2009
-- License     :  BSD-style
-- 
-- Maintainer  :  golubovsky@gmail.com
-- Stability   :  experimental
-- Portability :  portable
-- 
--
--
-- Minimal glue for WebBits and DOM
------------------------------------------------------------------

module Data.DOM.WBTypes (
    castExpr
   ,exprType
   ,(/\)
   ,setjsProperty
  ) where

import WebBits.JavaScript
import qualified Data.Foldable as F
import Control.Monad

-- | Cast a WebBits Javascript expression to the given type. Type is represented
-- by a value of the desired type (ofter "undefined").

castExpr :: b -> Expression a -> Expression b

castExpr b e = fmap (const b) e

-- | Extract a type from an expression.

exprType :: Expression a -> a

exprType e =
  let f y z = NullLit (undefined :: a)
      (NullLit x) = F.foldr f undefined e
  in  x

-- | An infix version of "castExpr" provided for convenience.

(/\) :: Expression a -> b -> Expression b

(/\) = flip castExpr

-- | A helper function to encode a property setter. This function is mostly called
-- from converted IDL files for DOM interfaces.

setjsProperty :: (Monad m) => String -> Expression a -> Expression this -> m (Expression this)

setjsProperty pn pv this = do
  let tht = exprType this
      fun = FuncExpr tht [Id tht "x"] blk
      thv = VarRef tht (Id tht "x")
      blk = BlockStmt tht [setp, retx]
      setp = ExprStmt tht $ AssignExpr tht OpAssign (DotRef tht thv (Id tht pn)) (pv /\ tht)
      retx = ReturnStmt tht (Just thv)
  return $ ParenExpr tht $ CallExpr tht fun [this]

-- Split end

-- Split begin/Data.DOM.Extra

------------------------------------------------------------------
-- |
-- Module      :  Data.DOM.Extra
-- Copyright   :  (c) Dmitry Golubovsky, 2009
-- License     :  BSD-style
-- 
-- Maintainer  :  golubovsky@gmail.com
-- Stability   :  experimental
-- Portability :  portable
-- 
--
--
-- Address few shortcomings of W3C specifications, provide
-- few useful functions.
------------------------------------------------------------------

module Data.DOM.Extra (
  window
 ,document
 ,htmlDocument
) where

import Control.Monad
import Data.DOM.WindowObj
import Data.DOM.Window
import Data.DOM.Dom
import Data.DOM.Html2
import WebBits.JavaScript

-- | Access the global Window object.

window :: (Monad m) => m (Expression TWindow)

window = return $ VarRef TWindow (Id TWindow "window")

-- | Access the current document. This indeed should be made through the
-- Window interface, but current (incomplete) specification does not
-- provide an easy way for that.

document :: (Monad m) => m (Expression TDocument)

document = return $ VarRef TDocument (Id TDocument "window.document")

-- | Same as above, using the HTMLDocument interface.

htmlDocument :: (Monad m) => m (Expression THTMLDocument)

htmlDocument = return $ VarRef THTMLDocument (Id THTMLDocument "window.document")


-- Split end

